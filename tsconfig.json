{
  "compilerOptions": {
    /*===== 基本选项 =====*/
    "version": true, /* 打印编译器版本号 */
    "incremental": true, /* 启用增量编译 */
    "target": "ES2016", /* 指定ECMAScript目标版本 "ES3"（默认）， "ES5"， "ES6"/ "ES2015"， "ES2016"， "ES2017"或 "ESNext"。 */
    "module": "commonjs", /* 指定生成哪个模块系统代码： "None"， "CommonJS"， "AMD"， "System"， "UMD"， "ES6"或 "ES2015"。 */
    "lib": [
      "es2015",
      "es2016",
      "DOM",
    ], /* 编译过程中需要引入的库文件的列表 */
    "allowJs": false, /* 允许编译 js 文件 */
    "checkJs": false, /* 在 .js文件中报告错误。与 --allowJs配合使用。 */
    "jsx": "react", /* 在 .tsx文件里支持JSX： "React"或 "Preserve"。 */
    "declaration": true, /* 生成相应的 .d.ts文件。 */
    // "declarationMap": true,                /* 生成声明文件的输出路径。 */
    "sourceMap": false, /* 生成相应的 .map文件。 */
    // "outFile": "./",                       /* 将输出文件合并为一个文件。合并的顺序是根据传入编译器的文件顺序和 ///<reference``>和 import的文件顺序决定的。查看输出文件顺序文件了解详情。 */
    "outDir": "./dist", /* Redirect output structure to the directory. */
    // "rootDir": "./",                       /* 仅用来控制输出的目录结构 --outDir */
    "composite": true, /* 启用项目编译 */
    // "tsBuildInfoFile": "./",               /* 指定文件以存储增量编译信息 */
    "removeComments": true, /* 删除所有注释，除了以 /!*开头的版权信息。 */
    // "noEmit": true,                        /* 不生成输出文件。 */
    // "importHelpers": true,                 /* 从 tslib 导入辅助工具函数（比如 __extends， __rest等） */
    "downlevelIteration": true, /* 在针对“ES5”或“ES3”时，在“for of”、“spread”和“destructuring”中为iterables提供完全支持。 */
    "isolatedModules": true, /* 隔离模块,将每个文件作为单独的模块（与“ts.transpileModule”类似）。 */
    /*===== 严格类型检查选项 =====*/
    "strict": true, /* 启用所有严格类型检查选项。启用 --strict相当于启用 */
    "noImplicitAny": true, /* 在表达式和声明上有隐含的 any类型时报错 */
    "strictNullChecks": true, /* 在严格的 null检查模式下， null和 undefined值不包含在任何类型里，只允许用它们自己和 any来赋值（有个例外， undefined可以赋值到 void）。 */
    "strictFunctionTypes": true, /* 禁用函数参数双向协变检查。 */
    "strictBindCallApply": true, /* 对函数启用严格的“bind”、“call”和“apply”方法。 */
    "strictPropertyInitialization": true, /* 确保类的非undefined属性已经在构造函数里初始化。若要令此选项生效，需要同时启用--strictNullChecks */
    "noImplicitThis": true, /* 当 this表达式的值为 any类型的时候，生成一个错误。 */
    "alwaysStrict": true, /* 以严格模式解析并为每个源文件生成 "use strict"语句 */
    /*===== 附加检查 =====*/
    "noUnusedLocals": true, /* 若有未使用的局部变量则抛错。*/
    "noUnusedParameters": true, /* 若有未使用的参数则抛错。 */
    "noImplicitReturns": true, /* 不是函数的所有返回路径都有返回值时报错。 */
    "noFallthroughCasesInSwitch": true, /* 报告switch语句的fallthrough错误。（即，不允许switch的case语句贯穿） */
    /*===== 模块分辨率选项 =====*/
    "moduleResolution": "node", /* 决定如何处理模块。或者是"Node"对于Node.js/io.js，或者是"Classic"（默认）。*/
    "baseUrl": ".", /* 模块名到基于 baseUrl的路径映射的列表。 */
    "resolveJsonModule": true,
    "paths": {
      "@src/*": [
        "src/*"
      ],
      "@pages/*": [
        "src/pages/*"
      ],
      "@util/*": [
        "src/util/*"
      ],
      "@common/*": [
        "src/common/*"
      ],
      "@components/*": [
        "src/components/*"
      ]
    }, /* 模块名到基于 baseUrl的路径映射的列表。 */
    // "rootDirs": [
    //   "src/"
    // ],                        /* 根（root）文件夹列表，表示运行时组合工程结构的内容。 */
    "typeRoots": [
      "node_modules/@types/",
      "./typings"
    ], /* 要包含的类型声明文件路径列表。 */
    // "types": [], /* 要包含的类型声明文件名列表。 */
    "allowSyntheticDefaultImports": true, /* 允许从没有设置默认导出的模块中默认导入。这并不影响代码的输出，仅为了类型检查。 */
    "esModuleInterop": true, /* 通过为所有导入创建命名空间对象，启用CommonJS和ES模块之间的互操作性。表示“AllowSyntticDefaultImports”。 */
    "preserveSymlinks": true, /* 保留符号链接 */
    // "allowUmdGlobalAccess": true,          /* 允许从模块访问UMD全局。. */
    /*===== 源映射选项 =====*/
    // "sourceRoot": "",                      /* 指定TypeScript源文件的路径，以便调试器定位。当TypeScript文件的位置是在运行时指定时使用此标记。路径信息会被加到 sourceMap里。 */
    // "mapRoot": "",                         /* 为调试器指定指定sourcemap文件的路径，而不是使用生成时的路径。当 .map文件是在运行时指定的，并不同于 js文件的地址时使用这个标记。指定的路径会嵌入到 sourceMap里告诉调试器到哪里去找它们。 */
    // "inlineSourceMap": true,               /* 生成单个sourcemaps文件，而不是将每sourcemaps生成不同的文件。 */
    // "inlineSources": true,                 /* 将代码与sourcemaps生成到一个文件中，要求同时设置了 --inlineSourceMap或 --sourceMap属性。 */
    /*===== 实验选择 =====*/
    "experimentalDecorators": true, /* 启用实验性的ES装饰器。 */
    // "emitDecoratorMetadata": true,         /* 给源码里的装饰器声明加上设计类型元数据。 */
    /*===== 高级选项 =====*/
    "forceConsistentCasingInFileNames": true, /* 禁止对同一个文件的不一致的引用。 */
    "newLine": "lf", /* 当生成文件时指定行结束符： "crlf"（windows）或 "lf"（unix）。 */
    "preserveWatchOutput": true, /* 保留watch模式下过时的控制台输出。 */
    "pretty": true, /* 给错误和消息设置样式，使用颜色和上下文。 */
    "suppressImplicitAnyIndexErrors": true, /* 阻止 --noImplicitAny对缺少索引签名的索引对象报错。查看 issue #1232了解详情。 */
    "traceResolution": true, /* 生成模块解析日志信息 */
    "watch": true, /* 在监视模式下运行编译器。会监视输出文件，在它们改变时重新编译。监视文件和目录的具体实现可以通过环境变量进行配置。详情请看配置 Watch。 */
  },
  "compileOnSave": true, /* 在最顶层设置compileOnSave标记，可以让IDE在保存文件的时候根据tsconfig.json重新生成文件 */
  "exclude": [
    "node_modules",
    "doc",
    "__tests__"
  ],
  "include": [
    "src",
    // "__tests__"
  ]
}